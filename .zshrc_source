
[ ! -d ~/.config/nvim ] && mkdir -p ~/.config/nvim
alias git_submodule='git submodule update --init --recursive'
function git_push(){
  branch=$(git branch --show-current)
  invalid_branch=(main master)
  answer=y
  if [[ ${invalid_branch[(ie)$branch]} -le ${#invalid_branch} ]]; then
    read -q "answer?push $branch to origin? (y/n)? "
  fi
  [[ "$answer" == "y" ]] && echo $branch | xargs -n 1 git push $@ origin
}

function git_diff(){
  #this applies some defaults
  git diff $@ ':!*.pb.go'  ':!*.pb.gw.go' ':!*fakes*.go' ':!*vendor*' ':!*proto_gen*'
}

# alias showpath='echo "${(@s[:])PATH}" | xargs -n 1 | sort | uniq'
function showpath(){
  #FS = Field Separator (what is between the fields). FPAT = Field Pattern (what is in the fields)
  #NF = Number of Fields
  #RS = Record Split (could have just used this instead of setting FS and FPAT)
  #note that $0 = all fields. $1 is first field
  #awk returns records. each record contains fields
  #echo $PATH | awk  'BEGIN{FS=":";FPAT="[^\:]+"}{for (i=1;i<=NF;i++){print $i}}' \
  echo $PATH | awk 'BEGIN{RS=":"}{print $1}' | sort | uniq 
}
function get-github-token(){
  #line 1: read from gitconfig
  #line 2: breaking down so each row is <key> <value>. removing rows with only 1 field
  #line 3: getting the github password (same as github token)
  export GH_TOKEN=$(git config --get user.password)
  export GITHUB_TOKEN=$GH_TOKEN
  #export GITHUB_USER=$(git config --get user.email)
  export GITHUB_USER=jaredmtterminus
  echo "exported to GH_TOKEN and GITHUB_TOKEN"
}
alias nvimedit='nvim -p ~/.zshrc ~/.config/nvim/.zshrc_source ~/.config/nvim/init.vim'
alias nvimdir='nvim -c "terminal" -c "CocCommand explorer"'
function nvimcommit(){

  if [ ! -z "$1" ]; then
    CURDIR=$PWD
    cd ~/.config/nvim
    git checkout master
    # cp ~/.zshrc ./.zshrc_copy
    # cp ~/.vimrc ./.vimrc_copy
    git add .
    git commit -m "$1"
    git push -u origin master
    cd "$CURDIR"
    unset CURDIR
  fi

}
function nvimstatus(){
  CURDIR=$PWD
  cd ~/.config/nvim
  git checkout master
  git status
  cd "$CURDIR"
  unset CURDIR
}
function nvimdiff(){
  CURDIR=$PWD
  cd ~/.config/nvim
  git checkout master
  git diff
  cd "$CURDIR"
  unset CURDIR
}
function ls_dir(){
  ls -l $@ | awk '$1~/^d/{print $9}'
}

# prerequisites for fzf and vim
prereqs=(git fzf rg ag tree bat fd python3 ruby node npm nvim)
for i in $prereqs; do
  [ ! -x "$(command -v $i)" ] && echo "need to install $i"
done
unset prereqs

# if no ggrep, just use grep
[ ! -x "$(command -v ggrep)" ] && alias ggrep='grep'

#check if Vim Plug is installed
if [ ! -f "$HOME/.local/share/nvim/site/autoload/plug.vim" ]; then
  echo "install Vim Plug to neovim autoload directory"
fi

pfzf(){
  fzf --preview='less {}' \
  --bind shift-up:preview-up,shift-down:preview-down
}
# this should make fzf respect .gitignore files
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
if [ -z "$FZF_KEY_BINDINGS_FILE" ]; then
  echo "set \$FZF_KEY_BINDINGS_FILE \
    . Look in $(which fzf)/../.. to find .../key-bindings.zsh"
  
  #mac
  base=$(which fzf | awk 'BEGIN{FS="/"}{for (i=1;i<=NF-2;i++){print $i}}' | \
    xargs | awk '{for (i=1;i<=NF;i++){print "/\n" $i}}' | xargs | sed "s/ //g")
  if [ -d "$base/Cellar" ]; then
    fzfversion=$(ls "$base/Cellar/fzf")
    echo "for mac, try: "
    echo "$base/Cellar/fzf/$fzfversion/shell/key-bindings.zsh"
  fi

  echo "for linux, try: "
  echo "/usr/share/doc/fzf/examples/key-bindings.zsh"

else
  source "$FZF_KEY_BINDINGS_FILE"
fi 
# if [ ! -d ~/.config/fzf-tab-completion ]; then
#   cd ~/.config
#   git clone https://github.com/lincheney/fzf-tab-completion
#   cd ~
# fi
if [ ! -d ~/.config/fzf-tab ]; then
  CUR="$PWD"
  cd ~/.config
  git clone https://github.com/Aloxaf/fzf-tab
  cd "$CUR"
  unset CUR
fi
# source ~/.config/fzf-tab-completion/zsh/fzf-zsh-completion.sh
# bindkey '^I' fzf_completion
source ~/.config/fzf-tab/fzf-tab.plugin.zsh
export FZF_DEFAULT_COMMAND='fd --type f'
export FZF_DEFAULT_OPTS="--height 90%"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview \
  'bat --color=always --theme=gruvbox-dark --line-range :100 {}' \
  --bind 'ctrl-p:toggle-preview,shift-up:preview-page-up,shift-down:preview-page-down' \
  --height=90%"
export FZF_CTRL_F_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_F_OPTS="$FZF_DEFAULT_OPTS"
export FZF_ALT_C_COMMAND='fd --type d . --color=never --hidden'
export FZF_ALT_C_OPTS="--preview \
  'tree -C {} | head -50' \
  --height=90%"
#export FZF_CTRL_F_COMMAND="rg -i --no-heading"
bindkey -s "^f" "rgfzf^M" 
rgfzf() {
  #to do: if empty, don't call nvim
  FILE_SELECTED=$(rg -i --no-heading '' | fzf | ggrep -oP '[^\:]*(?=\:)' | head -1)
  if [ ! -z "$FILE_SELECTED" ]; then
    nvim $FILE_SELECTED
  fi
  unset FILE_SELECTED
}

# git aliases
alias git_cleanbranches='git checkout master && git branch \
  | grep -v "master" | xargs -n 1 git branch -d'
alias git_cleanbranchesD='git checkout master && git branch \
  | grep -v "master" | xargs -n 1 git branch -D'
alias docker_restart='docker ps -q | xargs docker restart'
function docker_clean_all(){
  docker ps -q | xargs -n 1 docker stop
  docker ps -aq | xargs -n 1 docker rm
  docker images -q | xargs -n 1 docker rmi
}
function docker_clean_containers(){
  docker ps -q | xargs -n 1 docker stop
  docker ps -aq | xargs -n 1 docker rm
}

listening() {
    if [ $# -eq 0 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P
    elif [ $# -eq 1 ]; then
        sudo lsof -iTCP -sTCP:LISTEN -n -P | grep -i --color $1
    else
        echo "Usage: listening [pattern]"
    fi
}

function jwt_encode(){
  payload=$1
  secret=${2:-$JWT_SIGNING_SECRET}

  # add exp if not already added
  exp=$(echo $payload | jq -r '.exp')
  if [[ $exp == null ]];then
    now=$(date +"%s")
    exp=$(echo $((now+60*60*24*10)))
    payload=$(echo $payload | jq '. + {"exp":"'$exp'"}')
  fi

  #reformat for python
  payload=$(echo $payload | jq -c | sed -e 's/:true/:True/g'  -e 's/:false/:False/g')

  [[ -z "$secret" ]] && echo "using encoded supersecret" && secret=$(echo "supersecret" | base64)
  python3 -c 'import jwt; encode = jwt.encode('$payload',"'$secret'",algorithm="HS256"); print(encode)'
}
function jwt_decode_and_validate(){
  encoded=$1
  secret=${2:-$JWT_SIGNING_SECRET}
  [[ -z "$secret" ]] && echo "using encoded supersecret" && secret=$(echo "supersecret" | base64)
  python3 -c 'import jwt; decode = jwt.decode("'$encoded'","'$secret'",algorithms=["HS256"]); print(decode)' | \
    sed -e 's/'"'"'/"/g' -e 's/None/""/g'
}
function jwt_decode2(){
  # note: better to use jwt_decode_go
  token=$1
  if [[ -z $token ]];then
    read IN
    token=$IN
  fi
  claims=$(echo $token | sed 's/\./ /g' | awk '{print $2}')
  len=$(echo $claims | wc -c | awk '{print $1}')
  [[ $(($len % 4)) == 3 ]] && claims="${claims}=="
  [[ $(($len % 4)) == 4 ]] && claims="${claims}="
  echo $claims | base64 --decode | jq
  #echo $token | sed 's/\.//g' | base64 --decode | jq | jq -s '.[1]'
}

function jwt_decode(){
  # note: better to use jwt_decode_go
  token=$1
  if [[ -z $token ]];then
    read IN
    token=$IN
  fi

  # Extract the payload part from the JWT token
  payload=$(echo "$token" | awk -F'.' '{print $2}')

  # Base64 decode the payload
  decoded_payload=$(echo "$payload" | base64 -d 2>/dev/null)

  # Check if the decoding was successful
  if [[ $? -ne 0 ]]; then
      echo "Error: Invalid JWT token format"
      return 1
  fi

  # Use jq to pretty print the decoded JSON payload
  echo "$decoded_payload" | jq
}

function jwt_decode_all(){
  token=$1
  if [[ -z $token ]];then
    read IN
    token=$IN
  fi
  claims=$(echo $token | sed 's/\.//g')
  echo $climas | base64 --decode
}

function jq_clean(){
  # this function will "clean" the input of colors so jq can parse correctly
  sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" | jq $@
}
function jq2(){
# this version will fix formatting and other issues
# note: this didn't work
  read -r input
  printf '%s' "$input" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" | jq $@
}

urlencode() {
    setopt localoptions extendedglob
    input=( ${(s::)1} )
    print ${(j::)input/(#b)([^A-Za-z0-9_.\!~*\'\(\)-])/%${(l:2::0:)$(([##16]#match))}}
}

int_to_date(){
  input=$1
  [[ -z $input ]] && input=$(cat)
  date -r ${input} "+%Y-%m-%d %H:%M:%S"
}

psql_from_database_url(){
  db_url=$1 
  if [[ -z $db_url ]] && [[ ! -t 0 ]]
  then
      read IN
      db_url=$IN 
  fi
  DATABASE_URL="${db_url:-$DATABASE_URL}" 
  [[ -z $DATABASE_URL ]] && echo "DATABASE_URL is not set" && exit
  user=$(echo $DATABASE_URL | awk -F[/:] '{print $4}') 
  password_and_host=$(echo $DATABASE_URL | awk -F[/:] '{print $5}') 
  password=$(echo $password_and_host | awk -F@ '{print $1}') 
  host=$(echo $password_and_host | awk -F@ '{print $2}') 
  database=$(echo $DATABASE_URL | awk -F[/:] '{print $7}') 
  export PGPASSWORD=$password 
  psql -h $host -U $user -d $database
}
show_function_definition() {
  typeset -f "$1" | sed '1d;$d'
}

psql_definition(){
  echo "#!/bin/bash"
  show_function_definition psql_from_database_url
}


protodep2(){
  go run -mod=mod github.com/stormcat24/protodep $@
}

buf2(){
  docker run --volume "$(pwd):/workspace" --workdir /workspace bufbuild/buf:latest $@
}

#format of terminal display showing just path
#https://scriptingosx.com/2019/07/moving-to-zsh-06-customizing-the-zsh-prompt/
#PS1='%m %~%# '#shows login and full directory
#PS1='%~%# '#shows full directory
#PS1='[%d] $ '#shows 2 folders back (not working)
PS1='%F{29}%K{238}%2~%F{default}%K{default} %# '
